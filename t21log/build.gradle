apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release' // must be applied after your artifact generating plugin (eg. java / com.android.library)

version = "1.0.7"
def siteUrl = 'https://github.com/worldline-spain/t21-log'      // Homepage URL of the library
def gitUrl = 'https://github.com/worldline-spain/t21-log.git'   // Git repository URL
group = "com.tempos21.android.commons.utils"

def cfg = rootProject.ext.configuration;

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode cfg.version_code
        versionName cfg.version_name

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            buildConfigField "boolean", "LOG_ENABLED", "false" // Defining a constant for this buildType
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            buildConfigField "boolean", "LOG_ENABLED", "true" // Defining a constant for this buildType
        }
    }
}

publish {
    userOrg = 'worldline-spain'
    groupId = 'com.tempos21.android.commons.utils'
    artifactId = 't21-log'
    publishVersion = '1.0.7'
    desc = 'Android String crypter. Used for encryption of tokens'
    website = 'https://github.com/worldline-spain/t21-crypter-android'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
